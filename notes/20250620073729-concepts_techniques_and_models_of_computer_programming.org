:PROPERTIES:
:ID:       ae2fea7e-a99a-498f-ab5a-35dda2c22c1b
:END:
#+title: Concepts, Techniques, and Models of Computer Programming
#+STARTUP: latexpreview
#+Html_MATHJAX: align: left indent: 5em tagside: left
#+filetags: :math: :oz:

- [[id:0d27941b-353e-4a88-9390-4d9c12fd6058][Oz]] 

* Preface

#+begin_quote
A computation model is a formal system that defines how computations are
done. There are many ways to define computation models. Since this book is
intended to be practical, it is important that the computation model be directly
useful to the programmer. We therefore define it in terms of concepts that are
important to programmers: data types, operations, and a programming
language. The term computation model makes precise the imprecise notion of
"programming paradigm".

[cite:@van2004concepts p.xiii]
#+end_quote

** Designing Abstractions

#+begin_quote
We define an abstraction loosely as a tool or device that solves a particular
problem. Usually the same abstraction can be used to solve many different
problems.

[cite:@van2004concepts p.xviii]
#+end_quote

* General Computation Models

+ [[id:84e39e76-b5aa-48e3-a1e6-4842e0a9703b][Declarative Computational Model]]
+ [[id:3e6c95f1-5bb6-4bf0-a53d-9f6be6dbd83a][Declarative Programming Techniques]]
+ [[id:c5d0a6f9-f95d-439b-9756-9fb68a9546a9][Declarative Concurrency]]
+ [[id:c2a1839e-a9b4-457c-ab7a-fbfb90873a56][Message-Passing Concurrency]]
+ Explicit State
+ [[id:37826ede-d70a-4cc1-9e3d-5d110fc5fa92][Object-Oriented Programming]]
