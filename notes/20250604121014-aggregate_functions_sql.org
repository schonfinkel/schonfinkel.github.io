:PROPERTIES:
:ID:       2c592e15-546f-48d1-8ce4-7264066ada4f
:END:
#+title: Aggregate Functions (SQL)
#+filetags: :postgresql: :sql:

- [[id:11f7d9cc-51a6-4897-955b-37a756105677][SQL]]

* ~GROUP BY~

#+begin_quote
Aggregate functions are used in conjunction with the group by clause. A group by
clause splits a resultset into groups of rows and aggregate functions perform
calculations on them. [cite:@ferrari2023postgres p.131]
#+end_quote

| Function              | Description |
|-----------------------+-------------|
| ~AVG()~                 |             |
| ~COUNT()~               |             |
| ~MAX()~                 |             |
| ~MIN()~                 |             |
| ~SUM()~                 |             |
| ~ARRAY_AGG~             |             |
| ~JSON_AGG~ or ~JSONB_AGG~ |             |
| ~BOOL_AND(Predicate)~   |             |
| ~BOOL_OR(Predicate)~    |             |

#+begin_src sql
  SELECT category, COUNT(*)
  FROM posts
  GROUP BY category;
  -- Outputs:
   category | count
  ----------+-------
          3 | 1
          1 | 2
#+end_src

You can also filter the result of a ~GROUP BY~ by using ~HAVING~:

#+begin_src sql
  SELECT category, COUNT(*)
  FROM posts
  GROUP BY category
  HAVING COUNT(*) > 1;
#+end_src

and also pack multiple aggregations in a single ~SELECT~ statement:

#+begin_src sql
  SELECT
    category,
    COUNT(*),
    COUNT(*) FILTER (WHERE replies > 2) as number_of_replies
  FROM posts
  GROUP BY category
  HAVING COUNT(*) > 1;
#+end_src

** ~GROUPING SETS~, ~CUBE~, and ~ROLLUP~

#+begin_quote
More complex grouping operations than those described above are possible using
the concept of grouping sets. The data selected by the ~FROM~ and ~WHERE~ clauses is
grouped separately by each specified grouping set, aggregates computed for each
group just as for simple GROUP BY clauses, and then the results returned.
#+end_quote
