:PROPERTIES:
:ID:       04a44951-985d-4b5b-bd52-f1893ea29ae7
:END:
#+title: OTP Application
#+filetags: Erlang OTP

#+BEGIN_QUOTE
Applications are the way you package related modules in Erlang. The focus here
isn’t on packaging for distribution but on being able to treat a bunch of
modules as a single entity. Although OTP applications can be merely some library
code for others to call, more often they're like creatures with a life of their
own: they start up, do what they’re designed to do, and shut down. Some can have
multiple running instances, and some are limited to one instance at a
time. [cite:@logan2010erlang p.119]
#+END_QUOTE

+ Active Applications have a life cycle and must be started in order to be
  useful.
+ Library Applications are a passive collection of modules to be used by other
  applications, and they don’t need to be started or stopped.

* Releases and Targets

#+begin_quote
OTP applications provide convenient units of functionality, but only on the
Erlang programming level. To build a complete standalone software
service - something that runs on one or more machines on your network and
communicates with your other systems and with your users - you must typically
combine a number of such applications that will run on a single Erlang runtime
system. In [[id:6ed3a191-0128-453e-b0b6-37c48593a6f0][OTP]], such a higher-level package is called a *release*, and the result
of installing a release on some host machine is called a *target system*.

(...) Minimally, a target system must contain the stdlib and kernel applications
(apart from your own applications), and often the SASL application is also
needed to support logging.  [cite:@logan2010erlang p.242]
#+end_quote

* Packaging an Application

#+begin_src erlang
{application, example,
  [{description, "Description Example"},
   {vsn, "0.0.1"},
   {modules, [example, example_sup,example_app]},
   {registered,[example, example_sup]},
   {applications, [kernel,stdlib]},
   {mod, {example_app,[]} }]}.
#+end_src

#+begin_src erlang
  1> application:loaded_applications().
#+end_src
