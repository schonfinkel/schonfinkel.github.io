:PROPERTIES:
:ID:       04a44951-985d-4b5b-bd52-f1893ea29ae7
:END:
#+title: OTP Application
#+filetags: Erlang OTP

#+BEGIN_QUOTE
Applications are the way you package related modules in Erlang. The focus here
isn’t on packaging for distribution but on being able to treat a bunch of
modules as a single entity. Although [[id:6ed3a191-0128-453e-b0b6-37c48593a6f0][OTP]] applications can be merely some library
code for others to call, more often they're like creatures with a life of their
own: they start up, do what they’re designed to do, and shut down. Some can have
multiple running instances, and some are limited to one instance at a
time. [cite:@logan2010erlang p.119]
#+END_QUOTE

* Active Applications

#+begin_quote
All applications have the same basic structure (...). The application behaviour
encapsulates starting and stopping the application. When started, a running
application has a root [[id:2daf1307-afb4-49e4-98cb-66ac7eb27cf0][Supervisor]], which directly or indirectly manages all the
other processes of the application (including any subsystem
supervisors). [cite:@logan2010erlang p.243]
#+end_quote

Active Applications have a life cycle and must be started in order to be useful.

#+NAME: erlang-application-structure
#+BEGIN_SRC dot :file ../static/img/notes/erlang_application_structure.png :cmdline -Kdot -Tpng :exports results
  graph g {
  	ratio=fill
  	splines=spline
  	overlap=scale

  	node [
  			label="", 
  			xlabel="",
  			shape=circle,
  			fixedsize=true,
  			width=0.3,
  			color="black",
  			fillcolor="gray",
  			style="filled,solid",
  			fontsize=12
  	]

  	app [xlabel="Application", pos="1,1", fillcolor="red"]
  	sup [xlabel="Supervisor", pos="1,1", fillcolor="green"]
  	w1 [pos="0,0"]
  	w2 [pos="0,1"]
  	w3 [pos="0,2"]
  	w4 [pos="0,3"]

  	app -- sup
  	sup -- w1
  	sup -- w2
  	sup -- w3
  	sup -- w4
  }
#+END_SRC

#+RESULTS: erlang-application-structure
[[file:../static/img/notes/erlang_application_structure.png]]

** Metadata

OTP needs a certain amount of information to make sense of active applications,
like what to ~start/stop~ (provided you implement the ~application~ behaviour) in
your module and which dependencies are require to do so. This sort of
information is contained within the ~.app~ file. All this metadata is needed to
proper manage the application, the ~vsn~ tuple is particularly importante in the
context of release management.

#+begin_src erlang
{application, example,
  [{description, "Description Example"},
   {vsn, "0.0.1"},
   {modules, [example, example_sup, example_module]},
   {registered, [example, example_sup]},
   {applications, [kernel,stdlib]},
   {mod, {example_app,[]} }]}.
#+end_src

#+begin_src erlang
  1> application:loaded_applications().
#+end_src


** The Application Controller

#+begin_quote
There is only one application controller per runtime system, registered under
the name ~application_controller~. (...) The controller is also responsible for
loading the ~.app~ file for the application and checking that all the applications
it depends on have been started first. [cite:@logan2010erlang p.245]
#+end_quote

*** Start Types

+ ~permanent~
+ ~temporary~

* Library Applications

Library applications are a passive collection of modules to be used by other
applications, and they don't need to be started or stopped.

* Making a Release

#+begin_quote
Packaging of functionality in Erlang/OTP can be viewed as a hierarchy. At the
lowest level are modules, which encapsulate code. Modules are grouped into
applications, which encapsulate dynamic behavior and higher-level
functionality. Finally, applications are grouped into
releases. [cite:@logan2010erlang p.245]
#+end_quote

** Releases

#+begin_quote
A release consists of a set of applications together with some metadata
specifying how to start and manage those applications as a system. The
applications in a release execute together in the same Erlang runtime system: a
*target system*, stripped down to run only these
applications.

(...)

To summarize:
+ A release describes a running Erlang runtime system.
+ A release has a version.
+ A release aggregates a number of versioned applications along with metadata on
  how to manage the system.
+ Installing a release on a host machine produces a *target system*.

[cite:@logan2010erlang p.246]
#+end_quote

#+NAME: erlang-release-structure
#+BEGIN_SRC dot :file ../static/img/notes/erlang_release_structure.png :cmdline -Kdot -Tpng :exports results
  digraph release {
    node [
      shape=box,
      xlabel=""
    ];

    release [xlabel="Release", label="0.0.X", pos="1,1"]
    k [label="kernel A.B.C", pos="0,0"]
    stdlib [label="stdlib D.E.F", pos="0,1"]
    app [label="some_app W.X.Y", pos="0,2"]

    release -> k
    release -> stdlib
    release -> app
  }
#+END_SRC

#+RESULTS: erlang-release-structure
[[file:../static/img/notes/erlang_release_structure.png]]

*** Metadata

** System Configuration

#+begin_quote
The standard name for a configuration file is ~sys.config~. The name can be
anything as long as it ends with the extension ~.config~. Just like the ~.app~ file
and the ~.rel~ file, the ~.config~ file contains a single Erlang term followed by a
period. [cite:@logan2010erlang p.250]
#+end_quote
