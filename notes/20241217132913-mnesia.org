:PROPERTIES:
:ID:       568e0595-4bf0-40b5-981f-fd0aa9312785
:END:
#+title: MNESIA

Mnesia is a database management system (DBMS) that comes with [[id:de7d0e94-618f-4982-b3e5-8806d88cad5d][Erlang]]. It uses
the [[id:37c6ea44-0c80-4c57-a36e-98d37e8a3413][Erlang Term Storage]] and DETS underneath, but provides many more features
than those components.

* Creating the initial Database

During the course of creating this database, youâ€™ll do the following:

   1. Create a Schema
    #+begin_src erlang
      mnesia:create_schema([node()])
    #+end_src
   2. Initialize MNESIA
    #+begin_src erlang
      mnesia:start()
    #+end_src
   3. Create the DB Tables
    #+begin_src erlang
      mnesia:create_table(record_name, [{attributes, record_info(fields, record_name)}])
    #+end_src
   4. Populate Tables

#+begin_quote
By default, Mnesia will store your table in RAM only (~ram_copies~) on the current
node. This is speedy, but it means the data vanishes if the node crashes. If you
specify ~disc_copies~ (note the spelling), Mnesia will keep a copy of the database
on disk, but still use RAM for speed. You can also specify ~disc_only_copies~,
which will be slow. (...) . By combining these options and (eventually) multiple
nodes, you should be able to create fast and resilient
systems. [cite:@laurent2017 p.152]
#+end_quote

#+begin_quote
Your interactions with Mnesia should be contained in transactions, especially
when your database is shared across multiple nodes. The main ~mnesia:write~,
~mnesia:read~, and ~mnesia:delete~ methods work only within transactions,
period. [cite:@laurent2017 p.155]
#+end_quote

* Queries
+ Selecting All Data in a Table:

#+begin_src erlang
  %% sql equivalent
  %% select * from <table>
  select_all(from) -> do(qlc:q([x || x <- mnesia:table(from)]));
#+end_src

+ Joins

** Transactions

#+begin_quote
This is exactly the guarantee that ~mnesia:transaction/1~ provides. Either all the
reads and writes to the tables in the database within a particular transaction
succeed, or none of them does. If none of them does, the transaction is said to
fail. If the transaction fails, no changes will be made to the database.

The strategy that Mnesia uses for this is a form of pessimistic
locking. Whenever the Mnesia transaction manager accesses a table, it tries to
lock the record or the entire table depending upon the context. If it detects
that this might lead to deadlock, it immediately aborts the transaction and
undoes any changes it has made. [cite:@armstrong2013 p.327]
#+end_quote

#+begin_src erlang
something(...) ->
  F = fun() ->
    % To add a Row
    mnesia:write(Row)
    % or delete it
    mnesia:delete(Oid)
    % ... or ...
    qlc:e(Q)
    end,
  mnesia:transaction(F).
#+end_src
