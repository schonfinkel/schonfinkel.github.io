:PROPERTIES:
:ID:       568e0595-4bf0-40b5-981f-fd0aa9312785
:END:
#+title: MNESIA

Mnesia is a database management system (DBMS) that comes with [[id:de7d0e94-618f-4982-b3e5-8806d88cad5d][Erlang]]. It uses
the [[id:37c6ea44-0c80-4c57-a36e-98d37e8a3413][Erlang Term Storage]] and DETS underneath, but provides many more features
than those components.

* Creating the initial Database

During the course of creating this database, youâ€™ll do the following:

   1. Initialize MNESIA
   2. Start a Node
   3. Create a Schema
    #+begin_src erlang
      mnesia:create_schema([node()])
    #+end_src
   4. Create the DB Tables
    #+begin_src erlang
      mnesia:create_table(your_record, [{type, bag}, ...])
    #+end_src
   5. Populate Tables

#+begin_quote
By default, Mnesia will store your table in RAM only (~ram_copies~) on the current
node. This is speedy, but it means the data vanishes if the node crashes. If you
specify ~disc_copies~ (note the spelling), Mnesia will keep a copy of the database
on disk, but still use RAM for speed. You can also specify ~disc_only_copies~,
which will be slow. (...) . By combining these options and (eventually) multiple
nodes, you should be able to create fast and resilient
systems. [cite:@laurent2017 p.152]
#+end_quote

#+begin_quote
Your interactions with Mnesia should be contained in transactions, especially
when your database is shared across multiple nodes. The main ~mnesia:write~,
~mnesia:read~, and ~mnesia:delete~ methods work only within transactions,
period. [cite:@laurent2017 p.155]
#+end_quote

#+print_bibliography:
