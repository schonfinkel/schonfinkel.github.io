:PROPERTIES:
:ID:       60f014f9-8a82-43b8-ae13-dee68b9470bf
:END:
#+title: Statements (PostgreSQL)
#+filetags: :postgresql: :sql:

- [[id:1949c98e-e1c0-474b-b383-c76aa418d583][PostgreSQL]]

* ~SELECT~
** ~LIKE~ and ~ILIKE~
** ~DISTINCT~
** ~LIMIT~ and ~OFFSET~

#+begin_quote
~LIMIT~ and ~OFFSET~ are used to return a portion of data from a resultset
generated by a query; the ~LIMIT~ clause is used to limit the number of records in
output and the ~OFFSET~ clause is used to provide PostgreSQL with the position in
the resultset from which to start returning data.

[cite:@ferrari2023postgres p.111]
#+end_quote

* Subqueries

** Subqueries as Expressions

*** Scalar Subquery
Results in a single row

*** Multi-Row Subquery
Results in multiple rows, tipically used in the where clause with operators such as ~IN~, ~NOT~, ~EXISTS~, ~ANY~ and ~ALL~.

**** Correlated Subquery
A uncorrelated sub-query is a type of sub-query where the inner query doesnâ€™t depend upon the outer query for its execution.

**** Uncorrelated Subquery
A correlated sub-query is a type of query where the inner query depends upon the outcome of the outer query in order to perform its execution.

** Subqueries as Tables

** Semi-Joins & Subquery Elimination

#+begin_quote
A semi-join between two tables R and S returns rows from table R for which there
is at least one row from table S with matching values in the joining columns.

[cite:@dombrovskaya2021postgresql p.138]
#+end_quote

* ~JOIN~

** Cross Join

#+begin_src sql
  SELECT <...>
  FROM table1, table2
  -- or
  SELECT <...>
  FROM table1 CROSS JOIN table2
#+end_src

** Inner Join

** Outter Join

+ ~FULL~
+ ~LEFT~
+ ~RIGHT~
  
** Lateral Join

#+begin_quote
A lateral join is a type of join in SQL that allows you to join a table with a
subquery, where the subquery is run for each row of the main table.
[cite:@ferrari2023postgres p.129]
#+end_quote

* Aggregate

| Function | Description |
|----------+-------------|
| ~AVG()~    |             |
| ~COUNT()~  |             |
| ~MAX()~    |             |
| ~MIN()~    |             |
| ~SUM()~  |             |

** ~UNION~ / ~UNION ALL~

#+begin_quote
The ~UNION~ operator is used to combine the resultset of two or more ~SELECT~
statements. We can use the ~UNION~ statement only if the following rules are
respected:
  + Each ~SELECT~ statement within ~UNION~ must have the same number of columns.
  + The columns must have similar data types.
  + The columns in each ~SELECT~ statement must be in the same order.

[cite:@ferrari2023postgres p.133]
#+end_quote

** ~EXCEPT~ / ~INTERSECT~

* Common Table Expressions

#+begin_quote
A ~CTE~, or a common table expression, is a temporary result taken from a [[id:11f7d9cc-51a6-4897-955b-37a756105677][SQL]]
statement. This statement can contain ~SELECT~, ~INSERT~, ~UPDATE~, or ~DELETE~
instructions. The lifetime of a ~CTE~ is equal to the lifetime of the query.

[cite:@ferrari2023postgres p.145]
#+end_quote

** Recursive

#+BEGIN_COMMENT
While RECURSIVE allows queries to be specified recursively, internally such
queries are evaluated iteratively.
#+END_COMMENT

#+BEGIN_SRC sql
#+END_SRC
