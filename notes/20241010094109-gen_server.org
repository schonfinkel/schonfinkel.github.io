:PROPERTIES:
:ID:       1cd8fd81-a7c4-44ea-8b7a-d803e9b491af
:END:
#+title: Gen Server
#+filetags: Erlang Elixir OTP

#+begin_quote
Much of the work you think of as the core of a program - calculating results,
storing information, and preparing replies - will fit neatly into the ~gen_server~
behavior. It provides a core set of methods that let you set up a process,
respond to requests, end the process gracefully, and even pass state to a new
process if this one needs to be upgraded in place. [cite:@laurent2017 p.148]
#+end_quote

~gen_server~ is a generic server process that implements a standard set of
interface functions and functionality for tracing and error reporting, it also
fits an [[id:6ed3a191-0128-453e-b0b6-37c48593a6f0][OTP]] supervision tree.

#+begin_quote
Hereâ€™s the simple three-point plan for writing a ~gen_server~ callback module:
1. Decide on a callback module name.
2. Write the interface functions.
3. Write the six required callback functions in the callback module.

[cite:@armstrong2013 p.366]
#+end_quote

* Callback Structure

The ~gen_server~ behaviour interface contains six callback functions:

+ ~init/1~
+ ~handle_call/3~
+ ~handle_cast/2~
+ ~handle_info/2~
+ ~terminate/2~
+ ~code_change/3~

** Starting the Server (~init/1~)

~gen_server:start_link(Name, Mod, InitArgs, Opts)~ starts the server:

+ The generic server starts by calling ~Mod:init(InitArgs)~ (where ~Mod~ is the name
  of the callback module). If ~{ok, State}~ is returned, then the server is
  successfully started the server with an initial state.
+ If the first argument was atom ~{global, Name}~, it would start a global server
  that could be accessed on a cluster of Erlang nodes.

#+caption: A template with an example ~init~ callback function
#+begin_src erlang
  init([]) ->
    {ok, #state{}}.
#+end_src


** Calling the Server

*** ~handle_call/3~

To call the server, the client program calls ~gen_server:call(Name,
Request)~. This results in the ~handle_call/3~ callback module being called.

+ ~gen_server:call(?MODULE, Term)~ is used for a remote procedure call to the server.

#+caption: ~handle_call/3~ sends a synchronous message to a ~gen_server~ process and waits for a reply.
#+begin_src erlang
  handle_call(_Request, _From, State) ->
    Reply = ok,
    {reply, Reply, State}.
#+end_src

#+begin_quote
Normally we return ~{reply, Reply, NewState}~. When this happens, ~Reply~ goes back
to the client, where it becomes the return value of ~gen_server:call~. ~NewState~ is
the next state of the server.

The other return values, ~{noreply, ...}~ and ~{stop, ...}~ are used relatively
infrequently. ~noreply~ causes the server to continue, but the client will wait
for a reply so the server will have to delegate the task of replying to some
other process. Calling ~stop~ with the appropriate arguments will stop the
server. [cite:@armstrong2013 p.372]
#+end_quote

*** ~handle_cast/2~

To send an asynchronous message to a ~gen_server~ process, one must use ~handle_cast/2~: 

#+caption: Example of a ~handle_call/2~ template.
#+begin_src erlang
  handle_cast(_Msg, State) ->
    {noreply, State}.
#+end_src

The handler usually just returns ~{noreply, NewState}~, which changes the state of
the server, or ~{stop, ...}~, which stops the server.

** Spontaneous Messages to the Server

#+begin_quote
The callback function ~handle_info(Info, State)~ is used for handling spontaneous
messages to the server. Spontaneous messages are any messages that arrive at the
server that were not sent by explicitly calling ~gen_server:call~ or
~gen_server:cast~. [cite:@armstrong2013 p.372]
#+end_quote

#+caption: Example implementation of a ~handle_info/2~ callback. The return values are the same as for ~handle_cast/2~.
#+begin_src erlang
  handle_info(_Info, State) ->
    {noreply, State}.
#+end_src

** Termination

#+begin_quote 
The server can terminate for many reasons. One of the ~handle_something~ routines
might return a ~{stop, Reason, NewState}~, or the server might crash with ~{'EXIT',
reason}~. In all of these circumstances, no matter how they occurred,
~terminate(Reason, NewState)~ will be called.
#+end_quote

#+caption: Example of a ~terminate/2~ implementation, this callback is raised so you have a chance to clean things up, notice that no ~State~ is returned.
#+begin_src erlang
  terminate(_Reason, _State) ->
    ok.
#+end_src

** Code Change

The callback ~code_change/3~ function is called by the release handling subsystem
when the system performs a software upgrade.

#+caption: Converts process state when code is changed.
#+begin_src erlang
  code_change(_OldVsn, State, _Extra) ->
    {ok, State}.
#+end_src
