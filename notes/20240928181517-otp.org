:PROPERTIES:
:ID:       6ed3a191-0128-453e-b0b6-37c48593a6f0
:ROAM_ALIAS: "Open Telecom Platform"
:END:
#+title: OTP
#+filetags: "Erlang" "Elixir" "OTP"

#+BEGIN_QUOTE
OTP is a domain-independent set of frameworks, principles, and patterns that
guide and support the structure, design, implementation, and deployment of
Erlang systems. Using OTP in your projects will help you avoid accidental
complexity: things that are difficult because you picked inadequate tools.

OTP is said to consist of three building blocks that, when used together,
provide a solid approach to designing and developing systems in the problem
domain we’ve just described. They are [[id:de7d0e94-618f-4982-b3e5-8806d88cad5d][Erlang]] itself, tools and libraries, and a
set of design principles. [cite:@cesarini2016designing p.4]
#+END_QUOTE

* The Tripartite Structure of OTP

** Erlang

** Tools and Libraries

*** Basic Applications

#+begin_quote
Together with the compiler, these are the minimal subset of applications
necessary in any system written in Erlang/OTP to do anything
meaningful. [cite:@cesarini2016designing p.8]
#+end_quote

+ [[id:d47afd83-8f59-44ea-a237-b6eafaa3662e][ERTS]]
+ The /kernel/
+ The Standard Libraries (/stdlib/)
+ The System Architecture and Support Libraries (/sasl/)

*** Database Applications
+ [[id:568e0595-4bf0-40b5-981f-fd0aa9312785][MNESIA]]
+ ~odbc~

*** Operations and Maintenance Applications
+ ~os_mon~
+ ~snmp~
+ ~otp_mibs~

*** Interface and Communication Applications
+ ~ei~
+ ~erl_interface~

** System Design Principles

#+begin_quote
The third building block of OTP consists of a set of abstract principles, design
rules, and generic behaviors. The abstract principles describe the software
architecture of an Erlang system, using processes in the form of generic
behaviors as basic ingredients. Design rules keep the tools you use compatible
with the system you are developing. Using this approach provides a standard way
of solving problems, making code easier to understand and maintain, as well as
providing a common language and vocabulary among the teams.

OTP generic behaviors can be seen as formalizations of concurrent design
patterns. Behaviors are packaged into library modules containing generic code
that solves a common problem. They have built-in support for debugging, software
upgrade, generic error handling, and built-in functionality for
upgrades. [cite:@cesarini2016designing p.10]
#+end_quote

*** Behaviors

#+begin_quote
Behaviours are a way of formalizing common patterns in process-oriented
programming. For example, the concept of a server is general and includes a
large portion of all processes you’ll ever need to write. All those processes
have a lot in common—in particular, whether they should be made to follow OTP
conventions for supervision and other things. (...)

Instead, an OTP behaviour takes such a recurring pattern and divides it into two
halves: the generic part and the application-specific implementation part. These
communicate via a simple, well-defined interface. [cite:@logan2010erlang p.97]
#+end_quote

**** Components of a Behaviour

#+begin_quote
The idea behind OTP behaviors is to split up the code into two modules: one for
the generic pattern, referred to as the behavior module, and one for specifics,
referred to as the callback module. The generic behavior module can be seen as
the driver. While it doesn’t know anything about what the callback module does,
it is aware of a set of exported callback functions it has to invoke and the
format of their return values. The callback module isn’t aware of what the
generic module does either; it only complies with the format of the data it has
to return when its callback functions are invoked.

[cite:@cesarini2016designing p.81]
#+end_quote

+ The interface
+ The implementation
+ The container

**** Behavior Types

+ [[id:04a44951-985d-4b5b-bd52-f1893ea29ae7][OTP Application]]: Implements the ~application~ behaviours, which is a way to
  package related modules in Erlang.
+ [[id:1cd8fd81-a7c4-44ea-8b7a-d803e9b491af][Gen Server]]: An OTP generalization of the client/server model.
+ [[id:2daf1307-afb4-49e4-98cb-66ac7eb27cf0][Supervisor]]: Used to implement supervision trees.
+ [[id:2a24a73a-0ad2-4276-be47-03cf33d52bc0][Gen StateM]]: State Machines
+ [[id:0372baa6-420e-483a-9621-7f80f1ad6974][Gen Event]]: Used for building event handlers (like error loggers).

* Distribution, Infrastructure, and Multicore
