:PROPERTIES:
:ID:       6ed3a191-0128-453e-b0b6-37c48593a6f0
:ROAM_ALIAS: "Open Telecom Platform"
:END:
#+title: OTP
#+filetags: [[roam:Erlang]]

#+BEGIN_QUOTE
OTP is a domain-independent set of frameworks, principles, and patterns that
guide and support the structure, design, implementation, and deployment of
[[id:de7d0e94-618f-4982-b3e5-8806d88cad5d][Erlang]] systems. Using OTP in your projects will help you avoid accidental
complexity: things that are difficult because you picked inadequate
tools. [cite:@cesarini2016designing p.20]
#+END_QUOTE

* Behaviors

#+begin_quote
Behaviours are a way of formalizing common patterns in process-oriented
programming. For example, the concept of a server is general and includes a
large portion of all processes you’ll ever need to write. All those processes
have a lot in common—in particular, whether they should be made to follow OTP
conventions for supervision and other things. (...)

Instead, an OTP behaviour takes such a recurring pattern and divides it into two
halves: the generic part and the application-specific implementation part. These
communicate via a simple, well-defined interface. [cite:@logan2010erlang p.97]
#+end_quote

** Components of a Behaviour
+ The interface
+ The implementation
+ The container

** OTP Behaviours

+ [[id:1cd8fd81-a7c4-44ea-8b7a-d803e9b491af][gen_server]]
+ [[id:2daf1307-afb4-49e4-98cb-66ac7eb27cf0][supervisor]]
+ ~gen_statem~: State Machines
+ ~gen_fsm~: Finite State Machine
+ [[id:0372baa6-420e-483a-9621-7f80f1ad6974][gen_event]]

** Packaging an Application

#+BEGIN_QUOTE
Applications are the way you package related modules in Erlang. The focus here
isn’t on packaging for distribution but on being able to treat a bunch of
modules as a single entity. Although OTP applications can be merely some library
code for others to call, more often they're like creatures with a life of their
own: they start up, do what they’re designed to do, and shut down. Some can have
multiple running instances, and some are limited to one instance at a
time. [cite:@logan2010erlang p.119]
#+END_QUOTE

+ Active Applications have a life cycle and must be started in order to be
  useful.
+ Library Applications are a passive collection of modules to be used by other
  applications, and they don’t need to be started or stopped.

#+begin_src 
{application, example,
  [{description, "Description Example"},
   {vsn, "0.0.1"},
   {modules, [example, example_sup,example_app]},
   {registered,[example, example_sup]},
   {applications, [kernel,stdlib]},
   {mod, {example_app,[]} }]}.
#+end_src

** Releases and Targets

#+begin_quote
OTP applications provide convenient units of functionality, but only on the
Erlang programming level. To build a complete standalone software
service - something that runs on one or more machines on your network and
communicates with your other systems and with your users - you must typically
combine a number of such applications that will run on a single Erlang runtime
system. In OTP, such a higher-level package is called a release, and the result
of installing a release on some host machine is called a target system.
#+end_quote

* References

#+print_bibliography: 

