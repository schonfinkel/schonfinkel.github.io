:PROPERTIES:
:ID:       860f97f8-e41d-480b-881b-203773406990
:END:
#+title: Window Functions (PostgreSQL)
#+filetags: :postgresql: :sql:

#+begin_quote
A window function performs a calculation across a set of table rows that are
somehow related to the current row. This is comparable to the type of
calculation that can be done with an aggregate function. However, window
functions do not cause rows to become grouped into a single output row like
non-window aggregate calls would. Instead, the rows retain their separate
identities. Behind the scenes, the window function is able to access more than
just the current row of the query result. [fn:1]
#+end_quote

* ~PARTITION BY~ and ~WINDOW~ clauses

#+begin_src sql
  SELECT
    category,
    count(*) OVER (PARTITION BY category) as category_count,
    count(*) OVER () as total_count
  FROM posts
  ORDER BY category;
#+end_src
will output both the count for each category, and the total amount of rows:
#+begin_src text
   category | category_count | total_count
  ----------+----------------+------------
          1 |              2 |          3
          1 |              2 |          3
          3 |              1 |          3
#+end_src

you can also define aliases for the window frames.

#+begin_src sql
  SELECT
    category,
    count(*) OVER  as category_count,
    count(*) OVER () as total_count
  FROM posts
  WINDOW
    w1 as (PARTITION BY category),
    w2 as ()
  ORDER BY category;
#+end_src

* Introducing some useful functions

** ~ROW_NUMBER~

#+begin_src sql
  SELECT
    category,
    row_number() OVER (PARTITION BY category) as category_count,
    count(*) OVER () as total_count
  FROM posts
  ORDER BY category;
#+end_src

** ~LEAD~
The ~LEAD()~ function is used to retrieve data from the next row.

** ~LAG~
The ~LAG()~ function is used to retrieve data from the previous row.

** ~ORDER BY~

** ~FIRST_VALUE()~ and ~LAST_VALUE()~

** ~RANK~

** ~DENSE_RANK~

** ~CUME_DIST~

#+begin_quote
The ~CUME_DIST~ function computes the fraction of partition rows that are less
than or equal to the current row and its peers.
[cite:@ferrari2023postgres p.165]
#+end_quote

#+begin_src sql
  SELECT
    x,
    CUME_DIST() OVER w 
  FROM (SELECT generate_series(1,10) AS x)
  WINDOW w AS (ORDER BY x);

  -- Outputs:
   x  | cume_dist 
  ----+-----------
    1 |       0.1
    2 |       0.2
    3 |       0.3
    4 |       0.4
    5 |       0.5
    6 |       0.6
    7 |       0.7
    8 |       0.8
    9 |       0.9
   10 |         1
#+end_src

** ~NTILE~

* Using Advanced Statement Window Functions

* Value Functions

* Footnotes

[fn:1] Source: [[https://www.postgresql.org/docs/current/tutorial-window.html][PostgreSQL Docs]]
