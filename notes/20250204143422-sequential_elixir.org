:PROPERTIES:
:ID:       91747bfe-763e-4eed-b011-7a5537661764
:END:
#+title: Sequential Elixir

* Modules

#+begin_quote
  A module is a collection of functions, somewhat like a namespace. Every
  [[id:8d568d81-9c22-4d94-81b2-27a2d730ba98][Elixir]] function must be defined inside a module.

  [cite:@juric2024elixir p.23]
#+end_quote

#+begin_src elixir
  defmodule A do
    defmodule B do
      ...
    end
    ...
  end
#+end_src

** Module Attributes

#+begin_quote
  defmodule Circle do
    @pi 3.14159
 
    def area(r), do: r*r*@pi
    def circumference(r), do: 2*r*@pi
  end
#+end_quote

** Type Specs

#+begin_quote
Typespecs provide a way to compensate for the lack of a static type system. This
can be useful in conjunction with the [[id:54473599-719d-460b-92ba-3796dd951872][Dializer]] tool to perform static analysis
of your programs. [cite:@juric2024elixir p.34]
#+end_quote


* Functions

#+begin_quote
A function must always be a part of a module. Function names follow the same
conventions as variables: they start with a lowercase letter or underscore
character and are followed by a combination of alphanumerics and underscores.

[cite:@juric2024elixir p.25]
#+end_quote

#+begin_src elixir
  defmodule Mod do
    def func(a, b) do
      ...
      a + b
    end

    # If your function's body consists of a single expression, you can use the "do" notation
    def func2(a, b), do: a + b

    # You can also use defp to make the function private
    defp func3(a, b), do: a + b
  end
#+end_src

** Arity

#+begin_quote
Arity describes the number of arguments a function receives. A function is
uniquely identified by its containing module, name, and arity.

[cite:@juric2024elixir p.29]
#+end_quote

* Numbers

* Atoms

* Tuples

* Lists

* Maps

#+begin_quote
A map is a key-value store, where keys and values can be any term. Maps have
dual usage in Elixir. They’re used to power dynamically sized key-value
structures, but they’re also used to manage simple records—a couple of
well-defined named fields bundled together.

[cite:@juric2024elixir p.46]
#+end_quote

* Binaries and Bitstrings

* Strings

* Higher-Level Types

#+begin_quote
The aforementioned built-in types are inherited from the Erlang world. After
all, Elixir code runs on BEAM, so its type system is heavily influenced by the
Erlang foundations. But on top of these basic types, Elixir provides some
higher-level abstractions. The ones most frequently used are ~Range~, ~Keyword~,
~MapSet~, ~Date~, ~Time~, ~NaiveDateTime~, and ~DateTime~.
#+end_quote

* IO Lists

* Macros

#+begin_quote
Macros are one of the most important features Elixir brings to the table that
are unavailable in plain Erlang. They make it possible to perform powerful code
transformations at compile time, thus reducing boilerplate and providing
elegant, mini-DSL expressions.

(...)

A macro consists of Elixir code that can change the semantics of the input
code. A macro is always called at compile time; it receives the parsed
representation of the input Elixir code, and it has the opportunity to return an
alternative version of that code.

[cite:@juric2024elixir p.62]
#+end_quote

